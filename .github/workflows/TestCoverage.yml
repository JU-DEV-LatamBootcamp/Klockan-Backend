  name: Test coverage

  on:
    push:
      branches:
        - develop
        
  jobs:
    test:
      runs-on: ubuntu-latest
      steps:
        - name: Checkout code
          uses: actions/checkout@v4
        - name: Change directory to KlockanAPI
          run: cd KlockanAPI
        - name: Set up .NET Core SDK
          uses: actions/setup-dotnet@v4
          with:
              dotnet-version: '8.0.x'
        - name: Restore dependencies
          run: cd KlockanAPI && dotnet restore
        - name: Install report generator
          run: dotnet tool install --global dotnet-reportgenerator-globaltool --version 5.2.2
        - name: Build and run tests with coverage
          run: |
              cd KlockanAPI && dotnet test --filter Category!=Integration --collect:"XPlat Code Coverage" --results-directory ./TestResults /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=./TestResults/Coverage/
              reportgenerator -reports:"./TestResults/*/coverage.cobertura.xml" -targetdir:"./TestResults/CoverletReports" -reporttypes:"HtmlInline_AzurePipelines_Dark;Cobertura" -historydir:./TestResults
        - name: Calculate coverage percentage
          run: |
            total_lines=$(grep -o '<line' ./KlockanAPI/TestResults/Coverage/coverage.cobertura.xml | wc -l)
            covered_lines=$(grep -o '<line coverable="true" hits="[1-9]"' ./KlockanAPI/TestResults/Coverage/coverage.cobertura.xml | wc -l)
            coverage_percentage=$((covered_lines * 100 / total_lines))
            echo "Coverage Percentage: $coverage_percentage%"
            if [ $coverage_percentage -lt 50 ]; then
              echo "Coverage is below 50%, failing the job."
              exit 1
            fi
        - name: Upload coverage report
          uses: actions/upload-artifact@v2
          with:
            name: coverage-report
            path: ./KlockanAPI/TestResults/CoverletReports
