name: Staging

on:
  push:
    branches:
      - develop

jobs:
  unit-tests:
    name: Running unit test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Change directory to KlockanAPI
        run: cd KlockanAPI
      - name: Set up .NET Core SDK
        uses: actions/setup-dotnet@v4
        with:
            dotnet-version: '8.0.x'
      - name: Restore dependencies
        run: cd KlockanAPI && dotnet restore
      - name: Install report generator
        run: dotnet tool install --global dotnet-reportgenerator-globaltool --version 5.2.2
      - name: Build and run tests with coverage
        run: |
            cd KlockanAPI && dotnet test --filter Category!="Integration" --collect:"XPlat Code Coverage" --results-directory ./TestResults /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=./TestResults/Coverage/ ; reportgenerator -reports:"./TestResults/*/*.xml" -targetdir:"./TestResults/CoverletReports" -reporttypes:"HtmlInline_AzurePipelines_Dark;Cobertura" -historydir:./TestResults -filefilters:-*\KlockanAPI.Infrastructure\Data\Migrations* ;
      - name: Check for failing unit tests
        run: |
          if grep -q 'result="Fail"' ./KlockanAPI/TestResults/*.xml; then
            echo "Some unit tests have failed, failing the job."
          exit 1
          else
            echo "All unit tests passed."
          fi
      - name: Upload coverage report
        uses: actions/upload-artifact@v2
        with:
          name: coverage-report
          path: ./KlockanAPI/TestResults
  build:
    runs-on: ubuntu-latest
    environment: secrets
    needs: unit-tests
    name: Build and push to Docker Hub
    steps:
    - uses: actions/checkout@v3
    - name: Login Dockerhub
      env:
        DOCKER_USERNAME: ${{secrets.DOCKER_HUB_USERNAME}}
        DOCKER_PASSWORD: ${{secrets.DOCKER_HUB_PASSWORD}}
      run: docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
    - name: Build the Docker image
      run: docker-compose build
    - name: Tagin backend with tag github sha
      run: docker tag klockan-backend:v1 klockan/backend:v${{ secrets.BACKEND_MAJOR }}.${{ secrets.BACKEND_MINOR }}.${{ github.sha }} 
    - name: Push to docker hub
      run: docker push klockan/backend:v${{ secrets.BACKEND_MAJOR }}.${{ secrets.BACKEND_MINOR }}.${{ github.sha }} 
    - name: Tagin backend with tag latest 
      run: docker tag klockan-backend:v1 klockan/backend:latest
    - name: Push to docker hub
      run: docker push klockan/backend:latest 

  # migrate:
  #   runs-on: ubuntu-latest
  #   needs: build
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #     - name: Setup .NET Core
  #       uses: actions/setup-dotnet@v4
  #       with:
  #         dotnet-version: '8.0.x'
  #     - name: Install Entity Framework Tools
  #       run: dotnet tool install --global dotnet-ef --version 8.0.0
  #     - name: Apply migrations
  #       run: cd KlockanAPI/src/KlockanAPI.Infrastructure && dotnet ef database update
        
  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
 
      - name: Set up SSH key and deploy
        run: |
          echo "$PRIVATE_KEY" > private_key
          chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key $USER_NAME@$HOSTNAME << EOF
            cd /home/ubuntu/Klockan-App
            docker compose pull
            docker compose up -d
          EOF
        env:
          PRIVATE_KEY: ${{ secrets.SSH_PUBLIC_KEY }}
          HOSTNAME: ${{ secrets.HOST_NAME }}
          USER_NAME: ${{ secrets.USER_NAME }}
